diff --git a/widget/wordproc.c b/widget/wordproc.c
index 7abdc17..7e14398 100644
--- a/widget/wordproc.c
+++ b/widget/wordproc.c
@@ -7,6 +7,7 @@
 #include "inspect.h"
 #include <config.h>
 #include "edit.h"
+#include "stringtools.h"
 
 #ifdef MIDNIGHT
 #define tab_width option_tab_spacing
@@ -91,36 +92,30 @@ static long end_paragraph (WEdit * edit, long p, int force)
     return edit_eol (edit, edit_move_forward (edit, edit_bol (edit, edit->curs1), i - edit->curs_line, 0));
 }
 
-static unsigned char *get_paragraph (WEdit * edit, long p, long q, int indent, int *size)
+/* returns 1 on error */
+static int get_paragraph (WEdit * edit, long p, long q, int indent, CStr *r)
 {E_
-    unsigned char *s, *t;
-#if 0
-    t = malloc ((q - p) + 2 * (q - p) / option_word_wrap_line_length + 10);
-#else
-    t = malloc (2 * (q - p) + 1024);
-#endif
-    if (!t)
-	return 0;
-    for (s = t; p < q; p++, s++) {
+    char *s;
+    r->data = (char *) malloc (q - p + 1);
+    if (!r->data)
+	return 1;
+    for (s = r->data; p < q; p++, s++) {
 	if (indent)
 	    if (edit_get_byte (edit, p - 1) == '\n')
 		while (strchr ("\t ", edit_get_byte (edit, p)))
 		    p++;
 	*s = edit_get_byte (edit, p);
     }
-    *size = (unsigned long) s - (unsigned long) t;
-    t[*size] = '\n';
-    return t;
+    r->len = (int) (s - r->data);
+    return 0;
 }
 
-static void strip_newlines (unsigned char *t, int size)
+static void strip_newlines (CStr *t)
 {E_
-    unsigned char *p = t;
-    while (size--) {
-        int c;
-        c = (*p == '\n') ? ' ' : *p;
-	*p++ = c;
-    }
+    int i;
+    for (i = 0; i < t->len; i++)
+        if (t->data[i] == ' ')
+            t->data[i] = '\n';
 }
 
 #ifndef MIDNIGHT
@@ -137,11 +132,14 @@ static inline int next_tab_pos (int x)
 {E_
     return x += tab_width - x % tab_width;
 }
-static int line_pixel_length (unsigned char *t, long b, int l)
+
+static int line_pixel_length (CStr *t, long b, int l)
 {E_
     int x = 0, c, xn = 0;
     for (;;) {
-	c = t[b];
+        if (b >= t->len)
+            break;
+	c = (unsigned char) t->data[b];
 	switch (c) {
 	case '\n':
 	    return b;
@@ -165,19 +163,23 @@ static int line_pixel_length (unsigned char *t, long b, int l)
 }
 
 /* find the start of a word */
-static int next_word_start (unsigned char *t, int q, int size)
+static int next_word_start (const CStr *t, int q)
 {E_
     int i;
     for (i = q;; i++) {
-	switch (t[i]) {
+        if (i >= t->len)
+            return -1;
+	switch (t->data[i]) {
 	case '\n':
 	    return -1;
 	case '\t':
 	case ' ':
 	    for (;; i++) {
-		if (t[i] == '\n')
+                if (i >= t->len)
+                    return -1;
+		if (t->data[i] == '\n')
 		    return -1;
-		if (t[i] != ' ' && t[i] != '\t')
+		if (t->data[i] != ' ' && t->data[i] != '\t')
 		    return i;
 	    }
 	    break;
@@ -186,16 +188,19 @@ static int next_word_start (unsigned char *t, int q, int size)
 }
 
 /* find the start of a word */
-static int word_start (unsigned char *t, int q, int size)
+static int word_start (const CStr *t, int q)
 {E_
     int i = q;
-    if (t[q] == ' ' || t[q] == '\t')
-	return next_word_start (t, q, size);
+    assert (i >= 0);
+    if (q >= t->len)
+        return -1;
+    if (t->data[q] == ' ' || t->data[q] == '\t')
+	return next_word_start (t, q);
     for (;;) {
 	int c;
 	if (!i)
 	    return -1;
-	c = t[i - 1];
+	c = t->data[i - 1];
 	if (c == '\n')
 	    return -1;
 	if (c == ' ' || c == '\t')
@@ -205,31 +210,31 @@ static int word_start (unsigned char *t, int q, int size)
 }
 
 /* replaces ' ' with '\n' to properly format a paragraph */
-static void format_this (unsigned char *t, int size, int indent)
+static void format_this (CStr *t, int indent)
 {E_
     int q = 0, ww;
-    strip_newlines (t, size);
+    strip_newlines (t);
     ww = option_word_wrap_line_length * FONT_MEAN_WIDTH - indent;
     if (ww < FONT_MEAN_WIDTH * 2)
 	ww = FONT_MEAN_WIDTH * 2;
     for (;;) {
 	int p;
 	q = line_pixel_length (t, q, ww);
-	if (q > size)
+	if (q >= t->len)
 	    break;
-	if (t[q] == '\n')
+	if (t->data[q] == '\n')
 	    break;
-	p = word_start (t, q, size);
+	p = word_start (t, q);
 	if (p == -1)
-	    q = next_word_start (t, q, size);	/* Return the end of the word if the beginning 
+	    q = next_word_start (t, q);	        /* Return the end of the word if the beginning 
 						   of the word is at the beginning of a line 
 						   (i.e. a very long word) */
 	else
 	    q = p;
 	if (q == -1)	/* end of paragraph */
 	    break;
-	if (q)
-	    t[q - 1] = '\n';
+	if ((q - 1) >= 0 && (q - 1) < t->len)
+	    t->data[q - 1] = '\n';
     }
 }
 
@@ -243,7 +248,7 @@ static void replace_at (WEdit * edit, long q, int c)
 void edit_insert_indent (WEdit * edit, int indent);
 
 /* replaces a block of text */
-static void put_paragraph (WEdit * edit, unsigned char *t, long p, long q, int indent, int size)
+static void put_paragraph (WEdit * edit, CStr *t, long p, long q, int indent)
 {E_
     long cursor;
     int i, c = 0;
@@ -251,12 +256,12 @@ static void put_paragraph (WEdit * edit, unsigned char *t, long p, long q, int i
     if (indent)
 	while (strchr ("\t ", edit_get_byte (edit, p)))
 	    p++;
-    for (i = 0; i < size; i++, p++) {
+    for (i = 0; i < t->len; i++, p++) {
 	if (i && indent) {
-	    if (t[i - 1] == '\n' && c == '\n') {
+	    if (t->data[i - 1] == '\n' && c == '\n') {
 		while (strchr ("\t ", edit_get_byte (edit, p)))
 		    p++;
-	    } else if (t[i - 1] == '\n') {
+	    } else if (t->data[i - 1] == '\n') {
 		long curs;
 		edit_cursor_move (edit, p - edit->curs1);
 		curs = edit->curs1;
@@ -275,8 +280,8 @@ static void put_paragraph (WEdit * edit, unsigned char *t, long p, long q, int i
 	    }
 	}
 	c = edit_get_byte (edit, p);
-	if (c != t[i])
-	    replace_at (edit, p, t[i]);
+	if ((unsigned char) c != (unsigned char) t->data[i])
+	    replace_at (edit, p, (unsigned char) t->data[i]);
     }
     edit_cursor_move (edit, cursor - edit->curs1);	/* restore cursor position */
 }
@@ -317,8 +322,7 @@ current paragraph using heuristics.");
 void format_paragraph (WEdit * edit, int force)
 {E_
     long p, q;
-    int size;
-    unsigned char *t;
+    CStr t;
     int indent = 0;
     if (option_word_wrap_line_length < 2)
 	return;
@@ -335,27 +339,26 @@ void format_paragraph (WEdit * edit, int force)
     }
     CPushFont ("editor", 0);
     indent = test_indent (edit, p, q);
-    t = get_paragraph (edit, p, q, indent, &size);
-    if (!t)
+    if (get_paragraph (edit, p, q, indent, &t))
 	return;
     if (!force) {
 	int i;
-	if (strchr (NO_FORMAT_CHARS_START, *t)) {
-	    free (t);
+	if (t.len > 0 && strchr (NO_FORMAT_CHARS_START, (unsigned char) t.data[0])) {
+	    free (t.data);
 	    return;
 	}
-	for (i = 0; i < size - 1; i++) {
-	    if (t[i] == '\n') {
-		if (strchr (NO_FORMAT_CHARS_START "\t ", t[i + 1])) {
-		    free (t);
+	for (i = 0; i < t.len - 1; i++) {
+	    if (t.data[i] == '\n') {
+		if (strchr (NO_FORMAT_CHARS_START "\t ", (unsigned char) t.data[i + 1])) {
+		    free (t.data);
 		    return;
 		}
 	    }
 	}
     }
-    format_this (t, q - p, indent);
-    put_paragraph (edit, t, p, q, indent, size);
-    free (t);
+    format_this (&t, indent);
+    put_paragraph (edit, &t, p, q, indent);
+    free (t.data);
     CPopFont ();
 }
 
